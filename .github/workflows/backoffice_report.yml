name: Postman Test and Allure Report

on:
  push:
    branches:
      - main
    paths:
      - 'backoffice-apis/**'
  schedule:
    - cron: '30 18 * * 3'
    - cron: '30 18 * * 5'
    - cron: '0 20 * * 0'

jobs:
  run_tests:
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install newman and newman-reporter-allure
        run: |
          npm install -g newman newman-reporter-allure

      - name: Run Postman tests
        if: always()
        continue-on-error: true
        run: |
          newman run backoffice-apis/backoffice-apis.json --reporters cli,allure

      - name: Wait for 3 minutes before publishing
        run: sleep 10

      - name: Get Allure history
        uses: actions/checkout@v2
        if: always()
        continue-on-error: true
        with:
          repository: ${{ github.repository }}
          ref: gh-pages
          path: gh-pages

      - name: Wait before processing history
        run: sleep 10

      - name: Find latest folder number
        id: get_latest_folder
        if: always()
        run: |
          mkdir -p allure-history
          if [ -d gh-pages ]; then
            cp -r gh-pages/* allure-history/
            latest_number=$(find allure-history -maxdepth 1 -type d -name "[0-9]*" | sort -V | tail -n 1 | xargs basename 2>/dev/null || echo "0")
            if [[ ! "$latest_number" =~ ^[0-9]+$ ]]; then
              latest_number=0
            fi
            next_number=$((latest_number + 1))
            echo "::set-output name=next_folder_number::$next_number"
          else
            echo "::set-output name=next_folder_number::1"
          fi

      - name: Configure Allure report folder
        if: always()
        run: echo "NEXT_FOLDER_NUMBER=${{ steps.get_latest_folder.outputs.next_folder_number }}" >> $GITHUB_ENV

      - name: Generate Allure report
        id: build
        uses: simple-elf/allure-report-action@master
        if: always()
        continue-on-error: true
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history
          subfolder: ${{ env.NEXT_FOLDER_NUMBER }}

      - name: Parse latest summary.json
        id: parse_latest_json
        run: |
          latest_folder_number=${{ env.NEXT_FOLDER_NUMBER }}
          latest_summary_path="allure-history/${latest_folder_number}/widgets/summary.json"
          echo "Latest Summary Path: $latest_summary_path"
          if [ -f "$latest_summary_path" ]; then
            passed_tests=$(jq -r '.statistic.passed' "$latest_summary_path")
            failed_tests=$(jq -r '.statistic.failed' "$latest_summary_path")
            total_tests=$((passed_tests + failed_tests))
            if [ "$total_tests" -gt 0 ]; then
              passing_percentage=$(( passed_tests * 100 / total_tests ))
              failing_percentage=$(( failed_tests * 100 / total_tests ))
            else
              passing_percentage=0
              failing_percentage=0
            fi
            echo "::set-output name=passing_percentage::$passing_percentage"
            echo "::set-output name=failing_percentage::$failing_percentage"
            echo "::set-output name=passed_tests::$passed_tests"
            echo "::set-output name=failed_tests::$failed_tests"
          else
            echo "::set-output name=passing_percentage::0"
            echo "::set-output name=failing_percentage::0"
            echo "::set-output name=passed_tests::0"
            echo "::set-output name=failed_tests::0"
          fi

      - name: Deploy gh-pages branch to Surge
        if: always()
        run: |
          git clone --branch gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} gh-pages-deploy
          cd gh-pages-deploy
          npm install -g surge
          surge . ${{ secrets.SURGE_DOMAIN }} --token ${{ secrets.SURGE_TOKEN }} --email ${{ secrets.SURGE_EMAIL }}
          

      # Optional Slack Notification
      # - name: Notify Slack
      #   if: always()
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_CHANNEL: 'C070KUKPDLZ'
      #     SLACK_MESSAGE: |
      #       *Wholistic Organization - API Quality Readiness*
      #       *Contributors - Azeez*
      #       Status: ${{ job.status }}
      #       Passing Tests: ${{ steps.parse_latest_json.outputs.passing_percentage }}%
      #       Failing Tests: ${{ steps.parse_latest_json.outputs.failing_percentage }}%
      #       Total Passed: ${{ steps.parse_latest_json.outputs.passed_tests }}
      #       Total Failed: ${{ steps.parse_latest_json.outputs.failed_tests }}
      #       Report URL: https://${{ secrets.SURGE_DOMAIN }}/${{ env.NEXT_FOLDER_NUMBER }}
