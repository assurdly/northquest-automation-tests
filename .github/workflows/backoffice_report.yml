name: Postman Test and Allure Report

on:
  push:
    branches:
      - main
    paths:
      - 'backoffice-apis/**'
  schedule:
    - cron: '30 18 * * 3'
    - cron: '30 18 * * 5'
    - cron: '0 20 * * 0'

jobs:
  run_tests:
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install newman and newman-reporter-allure
        run: |
          npm install -g newman newman-reporter-allure surge
          echo "Newman, Allure and Surge installed."

      - name: Run Postman tests
        if: always()
        continue-on-error: true
        run: |
          newman run backoffice-apis/backoffice-apis.json --reporters cli,allure

      - name: Wait before publishing
        run: sleep 100

      - name: Get Allure history
        uses: actions/checkout@v2
        if: always()
        continue-on-error: true
        with:
          repository: ${{ github.repository }}
          ref: gh-pages
          path: gh-pages

      - name: Wait again
        run: sleep 200

      - name: Find latest folder number
        id: get_latest_folder
        if: always()
        run: |
          mkdir -p allure-history
          if [ -d gh-pages ]; then
            cp -r gh-pages/* allure-history/
            latest_number=$(find allure-history -maxdepth 1 -type d -name "[0-9]*" | sort -V | tail -n 1 | xargs basename 2>/dev/null || echo "0")
            if [[ ! "$latest_number" =~ ^[0-9]+$ ]]; then
              latest_number=0
            fi
            next_number=$((latest_number + 1))
            echo "::set-output name=next_folder_number::$next_number"
          else
            echo "::set-output name=next_folder_number::1"
          fi

      - name: Configure Allure report folder
        if: always()
        run: echo "NEXT_FOLDER_NUMBER=${{ steps.get_latest_folder.outputs.next_folder_number }}" >> $GITHUB_ENV

      - name: Allure report action
        id: build
        uses: simple-elf/allure-report-action@master
        if: always()
        continue-on-error: true
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history
          subfolder: ${{ env.NEXT_FOLDER_NUMBER }}

      - name: Wait before Surge deployment
        if: always()
        run: sleep 60

      - name: Deploy to Surge
        if: always()
        run: |
          export SURGE_TOKEN=${{ secrets.SURGE_TOKEN }}
          export SURGE_LOGIN=${{ secrets.SURGE_LOGIN }}
          DOMAIN=https://${{ secrets.SURGE_DOMAIN_PREFIX }}-${{ env.NEXT_FOLDER_NUMBER }}.surge.sh
          surge ./allure-history/${{ env.NEXT_FOLDER_NUMBER }} --domain $DOMAIN
          echo "Deployed to: $DOMAIN"
          echo "::set-output name=surge_url::$DOMAIN"

      - name: Parse latest summary.json
        id: parse_latest_json
        run: |
          latest_folder_number=${{ env.NEXT_FOLDER_NUMBER }}
          summary_path="allure-history/${latest_folder_number}/widgets/summary.json"
          if [ -f "$summary_path" ]; then
            passed=$(jq -r '.statistic.passed' "$summary_path")
            failed=$(jq -r '.statistic.failed' "$summary_path")
            total=$((passed + failed))
            if [ "$total" -gt 0 ]; then
              pass_pct=$((passed * 100 / total))
              fail_pct=$((failed * 100 / total))
            else
              pass_pct=0
              fail_pct=0
            fi
            echo "::set-output name=passing_percentage::$pass_pct"
            echo "::set-output name=failing_percentage::$fail_pct"
            echo "::set-output name=passed_tests::$passed"
            echo "::set-output name=failed_tests::$failed"
          else
            echo "::set-output name=passing_percentage::0"
            echo "::set-output name=failing_percentage::0"
            echo "::set-output name=passed_tests::0"
            echo "::set-output name=failed_tests::0"
          fi
