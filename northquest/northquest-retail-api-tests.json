{
	"info": {
		"_postman_id": "8a3cdcd5-0e00-4af7-8ca1-e58cab211f48",
		"name": "QA - Northquest / Retail",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Make Bill Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "452c8d5d-cca0-403f-a532-3a25a3b76f62",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "0c963952-0809-4ab5-b3eb-7a3b287c6865",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{userAccessToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/profiles/:profile_id/bill-payments/categories/:category_id/billers/:biller_id/pay",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"profiles",
						":profile_id",
						"bill-payments",
						"categories",
						":category_id",
						"billers",
						":biller_id",
						"pay"
					],
					"variable": [
						{
							"id": "4170557c-5cfc-41ca-80e7-a539d28a5cd4",
							"key": "profile_id",
							"value": "{{userFetchedProfileId}}"
						},
						{
							"id": "58f823c4-60eb-42ab-a0e3-5693d90fa96a",
							"key": "category_id",
							"value": "airtime"
						},
						{
							"id": "33f307fd-1b2a-4ea9-a7a3-613ad4a853b4",
							"key": "biller_id",
							"value": "airtel"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Make Bill Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "13d83dd5-511d-4103-a1c3-426d63179c4c",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "1897c1e8-5d45-4c47-acdf-531c6c22ed34",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{userAccessToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/profiles/:profile_id/bill-payments/categories/:category_id/billers/:biller_id/pay",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"profiles",
						":profile_id",
						"bill-payments",
						"categories",
						":category_id",
						"billers",
						":biller_id",
						"pay"
					],
					"variable": [
						{
							"id": "497c8d18-248a-495b-bb12-201486108102",
							"key": "profile_id",
							"value": "{{userFetchedProfileId}}"
						},
						{
							"id": "95d85213-714d-4ab2-a825-06416ee8e694",
							"key": "category_id",
							"value": "databundle"
						},
						{
							"id": "b1a59bf4-1920-4044-85c3-e0f4e4aacbe4",
							"key": "biller_id",
							"value": "9mobile"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User - Invalid Phone OTP",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f2f700b1-e134-4bc0-94fb-b06d3d30466a",
						"exec": [
							"try {",
							"    const { message } = pm.response.json()",
							"",
							"    pm.test(\"Status code is 400\", () => {",
							"        pm.response.to.have.status(400);",
							"    });",
							"    pm.test(\"Valid Error messages returned\", () => {",
							"        pm.expect(message).to.include('Phone OTP is not valid')",
							"    })",
							"",
							"} catch (error) {",
							"    console.error(\"Error from test:\", error)",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "1c8fc754-6cca-476a-974a-218b31e38d9d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{base_url}}/auth/onboard"
			},
			"response": []
		},
		{
			"name": "Reset Password - Complexity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "880d3b84-c510-4362-934f-d1005082e91a",
						"exec": [
							"try {",
							"    const { message } = pm.response.json()",
							"",
							"    pm.test(\"Status code is 400\", () => {",
							"        pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"Valid error messages returned\", () => {",
							"        pm.expect(message).includes('Passwords do not match')",
							"    })",
							"} catch (error) {",
							"    console.error(\"Error from test:\", error)",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "2455a4fb-6dc7-4aa5-b2f5-7f620033d3df",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{base_url}}/auth/reset-password"
			},
			"response": []
		},
		{
			"name": "Reset Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "880d3b84-c510-4362-934f-d1005082e91a",
						"exec": [
							"// try {",
							"//     pm.test(\"Status code is 200\", function () {",
							"//         pm.response.to.have.status(200);",
							"//     });",
							"",
							"//     pm.test(\"Validate that the user's password is not returned in the response\", () => {",
							"//         let data = pm.response.json().data;",
							"//         pm.expect(data).to.not.have.property('password');",
							"//         pm.expect(data).to.not.have.property('phone');",
							"//         pm.expect(data).to.not.have.property('created_on');",
							"//         pm.expect(data).to.not.have.property('deleted_on');",
							"//         pm.expect(data).to.not.have.property('modified_on');",
							"//         pm.expect(data).to.not.have.property('first_name');",
							"//         pm.expect(data).to.not.have.property('last_name');",
							"//         pm.expect(data).to.not.have.property('tenant_id');",
							"//         pm.expect(data).to.not.have.property('email');",
							"//         pm.expect(data).to.not.have.property('referral_code');",
							"//     })",
							"",
							"// } catch (error) {",
							"//     console.error(\"Error from test:\", error);",
							"// }",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "29256cdb-8e3d-4336-b19c-6349b500f095",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{base_url}}/auth/reset-password"
			},
			"response": []
		},
		{
			"name": "Make Bill Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "37eb89c7-e02c-4f7d-8ae4-7863e4ce83a7",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "29d48912-f6f7-4a92-ac77-bcbd78728f93",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{userAccessToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/profiles/:profile_id/bill-payments/categories/:category_id/billers/:biller_id/pay",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"profiles",
						":profile_id",
						"bill-payments",
						"categories",
						":category_id",
						"billers",
						":biller_id",
						"pay"
					],
					"variable": [
						{
							"id": "55b42f83-7775-4375-8502-23f638238ea1",
							"key": "profile_id",
							"value": "{{userFetchedProfileId}}"
						},
						{
							"id": "01230ecc-5a9b-481f-9a68-b335ec6ffa55",
							"key": "category_id",
							"value": "databundle"
						},
						{
							"id": "b9871371-ace3-4807-ad9f-af6254a4023a",
							"key": "biller_id",
							"value": "smile"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Reset Password - Empty confirm Password field",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "880d3b84-c510-4362-934f-d1005082e91a",
						"exec": [
							"try {",
							"    const { message } = pm.response.json()",
							"",
							"    pm.test(\"Status code is 400\", () => {",
							"        pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"Valid error messages returned\", () => {",
							"        pm.expect(message).to.include('Password is required.')",
							"    })",
							"} catch (error) {",
							"    console.error(\"Error from test:\", error)",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "30986557-2f9b-4d4d-8e4b-0559f82cace9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{base_url}}/auth/reset-password"
			},
			"response": []
		},
		{
			"name": "Verify Biller Account Number",
			"id": "351d0ffb-abd4-438d-b2e0-d5963f1ac730",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{userAccessToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/profiles/:profile_id/bill-payments/categories/:category_id/billers/:biller_id/verify",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"profiles",
						":profile_id",
						"bill-payments",
						"categories",
						":category_id",
						"billers",
						":biller_id",
						"verify"
					],
					"variable": [
						{
							"id": "ce236cf6-942d-459d-898f-1dc64e85bd95",
							"key": "profile_id",
							"value": "{{userFetchedProfileId}}"
						},
						{
							"id": "a96e10b2-3be4-408a-a09f-0c56b4bdc3f9",
							"key": "category_id",
							"value": "cabletv"
						},
						{
							"id": "ec9cb310-4028-4e67-b1b4-68b9238f7d87",
							"key": "biller_id",
							"value": "dstv"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Make Bill Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1972d135-8e94-4aff-9215-d06c1de5a2ff",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "474b0bd4-4db7-4cfe-8c37-ae540c0372f4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{userAccessToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/profiles/:profile_id/bill-payments/categories/:category_id/billers/:biller_id/pay",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"profiles",
						":profile_id",
						"bill-payments",
						"categories",
						":category_id",
						"billers",
						":biller_id",
						"pay"
					],
					"variable": [
						{
							"id": "9f8387d7-738b-4312-a2f8-ba9808791f33",
							"key": "profile_id",
							"value": "{{userFetchedProfileId}}"
						},
						{
							"id": "ae35d779-12c8-417f-9223-c52ab687a81d",
							"key": "category_id",
							"value": "airtime"
						},
						{
							"id": "1d76a133-a07f-4346-ae26-0a7df229f3a3",
							"key": "biller_id",
							"value": "glo"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify Email - Already Existing Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "db83aa08-12ed-4ced-93da-65b97f96d89b",
						"exec": [
							"try {",
							"    const { message } = pm.response.json()",
							"",
							"    pm.test(\"Status code is 400\", () => {",
							"        pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"Status code name has string\", function () {",
							"        pm.response.to.have.status(\"Bad Request\");",
							"    });",
							"",
							"    pm.test(\"Test for valid error message\", () => {",
							"        pm.expect(message).to.eql(\"Email already exists\")",
							"    })",
							"",
							"} catch (error) {",
							"    console.error(\"Error from test:\", error)",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "50f0b3b7-7cd4-4022-b102-7862de3a12ee",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic d3VubWk6S3ZHIVdAWGZwMHdIJEN4ZjA5dSQ=",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{base_url}}/auth/verify-email"
			},
			"response": []
		},
		{
			"name": "Make Bill Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9d9cb2bf-08a7-4a24-8f52-4f774cafb70b",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "57ad677d-6bc3-48d1-99c6-29b3147e675e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{userAccessToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/profiles/:profile_id/bill-payments/categories/:category_id/billers/:biller_id/pay",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"profiles",
						":profile_id",
						"bill-payments",
						"categories",
						":category_id",
						"billers",
						":biller_id",
						"pay"
					],
					"variable": [
						{
							"id": "180228ed-9b67-4efa-81a0-0d3d1d56cd0c",
							"key": "profile_id",
							"value": "{{userFetchedProfileId}}"
						},
						{
							"id": "fd1927b0-de1b-49cb-8247-cf45b2386ec6",
							"key": "category_id",
							"value": "epin"
						},
						{
							"id": "a1161205-6a0c-44d7-8065-94e456af90b6",
							"key": "biller_id",
							"value": "waec"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User - Password Complexity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f2f700b1-e134-4bc0-94fb-b06d3d30466a",
						"exec": [
							"try {",
							"    const { message } = pm.response.json()",
							"",
							"    pm.test(\"Status code is 400\", () => {",
							"        pm.response.to.have.status(400);",
							"    });",
							"    pm.test(\"Valid Error messages returned\", () => {",
							"        pm.expect(message).includes('Email OTP is not valid')",
							"    })",
							"",
							"} catch (error) {",
							"    console.error(\"Error from test:\", error)",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "66bcf69c-63e5-4f08-9b9a-103f340384a5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{base_url}}/auth/onboard"
			},
			"response": []
		},
		{
			"name": "Verify Biller Account Number-Invalid account number",
			"id": "6c0bcce2-080f-4880-bc7c-e36a3a737106",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{userAccessToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/profiles/:profile_id/bill-payments/categories/:category_id/billers/:biller_id/verify",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"profiles",
						":profile_id",
						"bill-payments",
						"categories",
						":category_id",
						"billers",
						":biller_id",
						"verify"
					],
					"variable": [
						{
							"id": "ca7791c1-4d8b-4fa8-9fc4-945ae502637e",
							"key": "profile_id",
							"value": ""
						},
						{
							"id": "0c123877-fdea-4d19-81b3-f994e96ffe9e",
							"key": "category_id",
							"value": "cabletv"
						},
						{
							"id": "68fd0010-bcec-4c19-9e45-7f8fb068869b",
							"key": "biller_id",
							"value": "dstv"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify Email - Valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "db8a99fb-c32a-495b-a2a3-1ab828f6c6ac",
						"exec": [
							"try {",
							"    const { message, data } = pm.response.json()",
							"    pm.environment.set(\"otpId\", data.id)",
							"",
							"    pm.test(\"Successful POST request\", function () {",
							"        pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"    });",
							"",
							"} catch (error) {",
							"    console.error(\"Error from test:\", error)",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4f73f52b-38d7-462e-ad83-2a00667c9382",
						"exec": [
							"// pm.environment.set('origin', \"https://northquestfinance.com\")",
							"pm.environment.set('base_url', 'https://public.northquestfinance.com/api-backend')"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "7cc81be3-9350-4c88-a885-fd405e7723b5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic d3VubWk6S3ZHIVdAWGZwMHdIJEN4ZjA5dSQ=",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{base_url}}/auth/verify-email"
			},
			"response": []
		},
		{
			"name": "Reset Password - Empty Fields",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "880d3b84-c510-4362-934f-d1005082e91a",
						"exec": [
							"try {",
							"    const { message } = pm.response.json()",
							"",
							"    pm.test(\"Status code is 400\", () => {",
							"        pm.response.to.have.status(400);",
							"    });",
							"    ",
							"    pm.test(\"Valid error messages returned\", () => {",
							"        pm.expect(message).includes('Identity is required.')",
							"        pm.expect(message).includes('The identity must be a valid email address or phone number.')",
							"        pm.expect(message).includes('OTP cannot be empty')",
							"        pm.expect(message).includes('Password is required.')",
							"        // pm.expect(message).includes('Password value must contain at least 1 number, 1 special character, 1 uppercase and 1 lowercase letter and be at least 8 characters long.')",
							"        // pm.expect(message).includes('Confirm password is required.')",
							"        // pm.expect(message).includes('Confirm password value must contain at least 1 number, 1 special character, 1 uppercase and 1 lowercase letter and be at least 8 characters in length.')",
							"    })",
							"} catch (error) {",
							"    console.error(\"Error from test:\", error)",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "8263cec8-9e72-490c-a097-629f9f27ed50",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{base_url}}/auth/reset-password"
			},
			"response": []
		},
		{
			"name": "Make Bill Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9398dd36-b930-4036-ad26-77d5ce44e924",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "86644806-7adb-4c74-ba16-b8045c8b16c9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{userAccessToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/profiles/:profile_id/bill-payments/categories/:category_id/billers/:biller_id/pay",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"profiles",
						":profile_id",
						"bill-payments",
						"categories",
						":category_id",
						"billers",
						":biller_id",
						"pay"
					],
					"variable": [
						{
							"id": "8cc0b904-c100-43b3-b0a9-d94e3db456ac",
							"key": "profile_id",
							"value": "{{userFetchedProfileId}}"
						},
						{
							"id": "34733e20-ef63-40be-9931-4aa7eef3c629",
							"key": "category_id",
							"value": "electricity"
						},
						{
							"id": "8425778c-4d97-41dc-a16b-d8d7c3958933",
							"key": "biller_id",
							"value": "abuja_electric_postpaid"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Make Bill Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8df629ea-ad57-4d1d-953b-59e1fb9a40bd",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "8b822c94-6043-4b9d-bfa1-b052574ccd83",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{userAccessToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/profiles/:profile_id/bill-payments/categories/:category_id/billers/:biller_id/pay",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"profiles",
						":profile_id",
						"bill-payments",
						"categories",
						":category_id",
						"billers",
						":biller_id",
						"pay"
					],
					"variable": [
						{
							"id": "bf714993-3669-4696-b5cd-db5cfcf40d01",
							"key": "profile_id",
							"value": "{{userFetchedProfileId}}"
						},
						{
							"id": "dafcc134-6b71-4ec7-864e-c1551113aa20",
							"key": "category_id",
							"value": "databundle"
						},
						{
							"id": "2d9c1723-bc18-4432-8604-8fe3172f19e3",
							"key": "biller_id",
							"value": "airtel"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Make Bill Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dac5be3a-b88a-480c-9245-47985e928e9d",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "920bc6ee-a4b0-443f-a4f5-f8e23c80addb",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{userAccessToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/profiles/:profile_id/bill-payments/categories/:category_id/billers/:biller_id/pay",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"profiles",
						":profile_id",
						"bill-payments",
						"categories",
						":category_id",
						"billers",
						":biller_id",
						"pay"
					],
					"variable": [
						{
							"id": "a5fbe005-ffe3-469a-b5b2-b0c3b35dd69e",
							"key": "profile_id",
							"value": "{{userFetchedProfileId}}"
						},
						{
							"id": "57538488-bb70-46dc-bf98-69981786c5fe",
							"key": "category_id",
							"value": "airtime"
						},
						{
							"id": "00f0a5a5-721d-4c44-bc87-fe6bc0188b7a",
							"key": "biller_id",
							"value": "mtn"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Make Bill Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fc979d2e-825e-4630-87f0-3db0753f6b66",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "97e49345-1b1a-4781-b13d-837eb1650b55",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{userAccessToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/profiles/:profile_id/bill-payments/categories/:category_id/billers/:biller_id/pay",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"profiles",
						":profile_id",
						"bill-payments",
						"categories",
						":category_id",
						"billers",
						":biller_id",
						"pay"
					],
					"variable": [
						{
							"id": "8f41125a-5a23-403a-86c2-4c705a15726a",
							"key": "profile_id",
							"value": "{{userFetchedProfileId}}"
						},
						{
							"id": "92ddcf5f-1ed8-4d5e-99fe-be348536b764",
							"key": "category_id",
							"value": "airtime"
						},
						{
							"id": "107ccae3-9f9e-4541-b9a8-49f5c0a1cacf",
							"key": "biller_id",
							"value": "smile"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User - Invalid Email OTP",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f2f700b1-e134-4bc0-94fb-b06d3d30466a",
						"exec": [
							"try {",
							"    const { message } = pm.response.json()",
							"",
							"    pm.test(\"Status code is 400\", () => {",
							"        pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"Valid Error messages returned\", () => {",
							"        pm.expect(message).to.include('Email OTP is not valid')",
							"    })",
							"",
							"} catch (error) {",
							"    console.error(\"Error from test:\", error)",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "9c062c00-24f4-4a4a-841b-c092a4c7fc61",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{base_url}}/auth/onboard"
			},
			"response": []
		},
		{
			"name": "Create User - Empty Fields",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f2f700b1-e134-4bc0-94fb-b06d3d30466a",
						"exec": [
							"try {",
							"    const { message } = pm.response.json()",
							"",
							"    pm.test(\"Status code is 400\", () => {",
							"        pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"Valid error messages returned\", () => {",
							"        pm.expect(message).includes('Email OTP ID is required.')",
							"        pm.expect(message).includes('Email OTP ID must be a valid UUID.')",
							"        pm.expect(message).includes('Phone OTP ID is required.')",
							"        pm.expect(message).includes('Phone OTP ID must be a valid UUID.')",
							"        pm.expect(message).includes('Email OTP is required.')",
							"        pm.expect(message).includes('Phone OTP is required.')",
							"        pm.expect(message).includes('Password is required.')",
							"        pm.expect(message).includes('First name is required.')",
							"        pm.expect(message).includes('First name must be at least 2 characters and contain only alphabets.')",
							"        pm.expect(message).includes('Last name is required.')",
							"        pm.expect(message).includes('Last name must be at least 2 characters and contain only alphabets.')",
							"    })",
							"",
							"} catch (error) {",
							"    console.error(\"Error from test:\", error)",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "a14ee637-2edd-42c2-86c3-70cfd278819a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{base_url}}/auth/onboard"
			},
			"response": []
		},
		{
			"name": "Verify Email - Empty Fields",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1e81b6b5-242d-4e3a-82b4-3ca2f96e7099",
						"exec": [
							"try {",
							"    const { message } = pm.response.json()",
							"",
							"    pm.test(\"Status code is 400\", () => {",
							"        pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"Status code name has string\", function () {",
							"        pm.response.to.have.status(\"Bad Request\");",
							"    });",
							"",
							"    pm.test(\"Test for valid error message\", () => {",
							"        pm.expect(message).includes(\"Email cannot be empty\")",
							"    })",
							"",
							"    pm.test(\"Test for valid error message\", () => {",
							"        pm.expect(message).includes(\"Invalid email format\")",
							"    })",
							"",
							"} catch (error) {",
							"    console.error(\"Error from test:\", error)",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "ca452b6c-efc8-4cca-98a7-22f421c1192f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic d3VubWk6S3ZHIVdAWGZwMHdIJEN4ZjA5dSQ=",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{base_url}}/auth/verify-email"
			},
			"response": []
		},
		{
			"name": "Make Bill Payment",
			"id": "d44ccac5-c640-49d0-9833-1d02717d9235",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{userAccessToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/profiles/:profile_id/bill-payments/categories/:category_id/billers/:biller_id/pay",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"profiles",
						":profile_id",
						"bill-payments",
						"categories",
						":category_id",
						"billers",
						":biller_id",
						"pay"
					],
					"variable": [
						{
							"id": "b4f58363-86ee-4370-93d7-572fe2fe2292",
							"key": "profile_id",
							"value": "{{userFetchedProfileId}}"
						},
						{
							"id": "f0c1e438-274a-4040-9061-6621cc838252",
							"key": "category_id",
							"value": "cabletv"
						},
						{
							"id": "c665240c-caae-4cfe-8de2-4af2a414c5fd",
							"key": "biller_id",
							"value": "dstv"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User - Valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "742c27e8-72c6-4981-90f0-70ef0dd92bc4",
						"exec": [
							"try {",
							"    const { message, data: { token } } = pm.response.json()",
							"    pm.environment.set(\"createdUserToken\", token)",
							"",
							"    // pm.test(\"Successful POST request\", function () {",
							"    //     pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"    // });",
							"",
							"} catch (error) {",
							"    console.error(\"Error from test:\", error)",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "d61a91c3-da06-44b3-996e-a921171b6aba",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{base_url}}/auth/onboard"
			},
			"response": []
		},
		{
			"name": "Verify Biller Account Number-Empty fields",
			"id": "d821bb6e-e8f9-4f26-b1dc-5381840b331a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{userAccessToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/profiles/:profile_id/bill-payments/categories/:category_id/billers/:biller_id/verify",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"profiles",
						":profile_id",
						"bill-payments",
						"categories",
						":category_id",
						"billers",
						":biller_id",
						"verify"
					],
					"variable": [
						{
							"id": "1b1f519d-508c-48b6-83c1-d8cc8734d0f6",
							"key": "profile_id",
							"value": ""
						},
						{
							"id": "cadc24e6-214e-4592-872c-f866e5e3ec67",
							"key": "category_id",
							"value": "cabletv"
						},
						{
							"id": "23782a02-de1c-4ccc-85e2-6df9f05c8a32",
							"key": "biller_id",
							"value": "dstv"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify Email - Invalid Email Format",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8841c5ae-0d02-479b-ad67-deac91019f36",
						"exec": [
							"try {",
							"    const { message } = pm.response.json()",
							"",
							"    pm.test(\"Status code is 400\", () => {",
							"        pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"Status code is 400\", () => {",
							"        pm.response.to.have.status(400);",
							"    })",
							"",
							"    pm.test(\"Status code name has string\", function () {",
							"        pm.response.to.have.status(\"Bad Request\");",
							"    });",
							"    ",
							"    pm.test (\"Test for valid error message\", () => {",
							"        pm.expect(message).includes(\"Invalid email format\")",
							"    })",
							"",
							"} catch (error) {",
							"    console.error(\"Error from test:\", error)",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "e0918660-f31f-476a-b72a-4f2e813ed3ba",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic d3VubWk6S3ZHIVdAWGZwMHdIJEN4ZjA5dSQ=",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{base_url}}/auth/verify-email"
			},
			"response": []
		},
		{
			"name": "Make Bill Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "72bf7378-4689-4da6-8f07-50f915915b58",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "eb547b3c-e526-4c98-89b2-301234582484",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{userAccessToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/profiles/:profile_id/bill-payments/categories/:category_id/billers/:biller_id/pay",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"profiles",
						":profile_id",
						"bill-payments",
						"categories",
						":category_id",
						"billers",
						":biller_id",
						"pay"
					],
					"variable": [
						{
							"id": "7644958f-0390-4389-9397-9f4ab0c035a7",
							"key": "profile_id",
							"value": "{{userFetchedProfileId}}"
						},
						{
							"id": "1e16647b-2b60-4215-bd78-01f236326dd3",
							"key": "category_id",
							"value": "airtime"
						},
						{
							"id": "cb16d0ea-e122-428b-a658-7763b33bbc2a",
							"key": "biller_id",
							"value": "9mobile"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Reset Password - Password Mismatch",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "880d3b84-c510-4362-934f-d1005082e91a",
						"exec": [
							"try {",
							"    const { message } = pm.response.json()",
							"",
							"    pm.test(\"Status code is 400\", () => {",
							"        pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"Valid error messages returned\", () => {",
							"        pm.expect(message).to.include('Passwords do not match')",
							"    })",
							"} catch (error) {",
							"    console.error(\"Error from test:\", error)",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "f753ea54-da8a-476f-8ddf-08ebac9baaa1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{base_url}}/auth/reset-password"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8bd6eab6-8127-439b-89cc-daad6145b2fb",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.environment.set('origin', \"https://dev.app.northquestfinance.com\")\r",
					"pm.request.headers.add({\r",
					"    key: \"origin\",\r",
					"    value: pm.environment.get(\"origin\")\r",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c7a1c916-348e-4d44-816f-c988147970d7",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}