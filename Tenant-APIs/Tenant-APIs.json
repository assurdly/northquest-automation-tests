{
	"info": {
		"_postman_id": "d71236bf-1949-4b2e-8bb4-4b1013805ffd",
		"name": "QA - Tenants Public API",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "List Users",
					"item": [
						{
							"name": "List Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dedcaa75-1bb8-4389-8804-0f4a86126e67",
										"exec": [
											"try {",
											"    const {",
											"        data",
											"    } = pm.response.json();",
											"",
											"    pm.environment.set(\"adminFetchedUserId\", data[0].id)",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Validate that the user's password is not returned in the response\", () => {",
											"        pm.expect(data[0]).to.not.have.property('password');",
											"    })",
											"} catch (error) {",
											"    console.error(\"Error from test:\", error);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "3e700fb6-ed94-41e2-bbdc-f904a5f4001b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/admin/tenants/:tenantId/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"admin",
										"tenants",
										":tenantId",
										"users"
									],
									"query": [
										{
											"key": "filter[first_name]",
											"value": "",
											"disabled": true
										},
										{
											"key": "filter[email]",
											"value": "",
											"disabled": true
										},
										{
											"key": "filter[phone]",
											"value": "",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "tenantId",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Users-Invalid Tenant Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d87c23ab-a61d-47fa-9953-82b3c30a9d45",
										"exec": [
											"try {",
											"    const { message, status } = pm.response.json()",
											"",
											"    pm.test(\"Status code is 400\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"",
											"    pm.test(\"Test for valid error message\", () => {",
											"        pm.expect(message).to.be.an(\"string\") && pm.expect(message).to.eql('Tenant ID must be a valid UUID')",
											"    })",
											"",
											"} catch (error) {",
											"    console.error(\"Error from test:\", error);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a343133e-108e-4f47-860a-ba7601cb84fe",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/tenants/:tenantId/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										":tenantId",
										"users"
									],
									"query": [
										{
											"key": "filter[first_name]",
											"value": "",
											"disabled": true
										},
										{
											"key": "filter[email]",
											"value": "",
											"disabled": true
										},
										{
											"key": "filter[phone]",
											"value": "",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "tenantId",
											"value": "@@"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Users - Filter (Empty Field)",
							"id": "1153534b-8685-4810-a675-8521260c342d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/tenants/:tenantId/users?filter[first_name]=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										":tenantId",
										"users"
									],
									"query": [
										{
											"key": "filter[first_name]",
											"value": ""
										},
										{
											"key": "filter[email]",
											"value": "",
											"disabled": true
										},
										{
											"key": "filter[phone]",
											"value": "",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "tenantId",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Users - Filter (FirstName)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3a3bd88-5c47-40f5-aa4e-b15bafc2c2ec",
										"exec": [
											"try {",
											"    const {",
											"        data",
											"    } = pm.response.json();",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Validate that the user's password is not returned in the response\", () => {",
											"        pm.expect(data[0]).to.not.have.property('password');",
											"    })",
											"",
											"    if (data) {",
											"        pm.test(\"The accuracy of the filtered results\", () => {",
											"            pm.expect(data[0].first_name).to.eql('Wunmi');",
											"        })",
											"    }",
											"} catch (error) {",
											"    console.error(\"Error from test:\", error);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "64d69d3d-e72e-494d-bd84-90acfdc068ba",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/tenants/:tenantId/users?filter[first_name]=Wunmi",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										":tenantId",
										"users"
									],
									"query": [
										{
											"key": "filter[first_name]",
											"value": "Wunmi"
										},
										{
											"key": "filter[email]",
											"value": "",
											"disabled": true
										},
										{
											"key": "filter[phone]",
											"value": "",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "tenantId",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Users - Filter (Email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b2b96bf-c63f-4713-ad4e-76c2ffcdd4e1",
										"exec": [
											"try {",
											"    const {",
											"        data",
											"    } = pm.response.json();",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Validate that the user's password is not returned in the response\", () => {",
											"        pm.expect(data[0]).to.not.have.property('password');",
											"    })",
											"",
											"    if (data) {",
											"        pm.test(\"The accuracy of the filtered results\", () => {",
											"            pm.expect(data[0].email).to.eql('adewunmiakinsanya@gmail.com');",
											"        })",
											"    }",
											"} catch (error) {",
											"    console.error(\"Error from test:\", error);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5a32058c-fd2c-439d-b5eb-20b92fe581d9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/tenants/:tenantId/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										":tenantId",
										"users"
									],
									"query": [
										{
											"key": "filter[email]",
											"value": "Wunmi",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "tenantId",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Users - Filter (Phone)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3368e199-7b25-4b48-a74b-079f76e1e7d8",
										"exec": [
											"try {",
											"    const {",
											"        data",
											"    } = pm.response.json();",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"} catch (error) {",
											"    console.error(\"Error from test:\", error);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "27889fed-40c3-41a7-b85c-81bb6e38c133",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/tenants/:tenantId/users?filter[phone]=Wunmi",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										":tenantId",
										"users"
									],
									"query": [
										{
											"key": "filter[phone]",
											"value": "Wunmi"
										}
									],
									"variable": [
										{
											"key": "tenantId",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Users-No auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2975afe6-e227-47a2-8aaa-c002d062776b",
										"exec": [
											"try {",
											"    const { message, status } = pm.response.json()",
											"",
											"    pm.test(\"Status code is 401\", function () {",
											"        pm.response.to.have.status(401);",
											"    });",
											"",
											"} catch (error) {",
											"    console.error(\"Error from test:\", error);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6a0a751d-2980-4c0d-8376-cd2a653ead8f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/tenants/:tenantId/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										":tenantId",
										"users"
									],
									"query": [
										{
											"key": "filter[first_name]",
											"value": "",
											"disabled": true
										},
										{
											"key": "filter[email]",
											"value": "",
											"disabled": true
										},
										{
											"key": "filter[phone]",
											"value": "",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "tenantId",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "23bb8add-8ac3-4409-a7f9-30372fd32c79"
				},
				{
					"name": "Update User",
					"item": [
						{
							"name": "Update User",
							"id": "fcddec1f-366c-4558-85bc-19d27612a32b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"first_name\": \"Wunmi\",\n    \"last_name\": \"Ade\",\n    \"email\": \"adewunmiakinsanya@gmail.com\",\n    \"phone\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/admin/tenants/:tenantId/users/:userIdd",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"admin",
										"tenants",
										":tenantId",
										"users",
										":userIdd"
									],
									"variable": [
										{
											"key": "tenantId",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "userIdd",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User-Empty fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "164da949-c541-43c1-bc69-16239c569659",
										"exec": [
											"try {",
											"    const { message, status } = pm.response.json()",
											"",
											"    pm.test(\"Status code is 400\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"",
											"    pm.test(\"Test for valid error message\", () => {",
											"        pm.expect(message).to.be.an(\"array\");",
											"",
											"    });",
											"",
											"} catch (error) {",
											"    console.error(\"Error from test:\", error);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "055f1842-38ae-4707-b6fd-dcb77c5eec09",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"first_name\": \"\",\n    \"last_name\": \"\",\n    \"email\": \"\",\n    \"phone\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/:tenantId/users/:userId",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										":tenantId",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "tenantId",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "userId",
											"value": "{{adminFetchedUserId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User-Invalid tenant Id",
							"id": "f07650e6-970d-4e2e-9fb8-87e3cdccec1e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"first_name\": \"Wunmi\",\n    \"last_name\": \"Ade\",\n    \"email\": \"adewunmiakinsanya@gmail.com\",\n    \"phone\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/:tenantId/users/:userId",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										":tenantId",
										"users",
										":userId"
									],
									"variable": [
										{
											"id": "6cc1be8d-841e-46d2-a7c9-b24f5069795a",
											"key": "tenantId",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"id": "599bacd6-d59b-4cf4-844d-b734af7aea97",
											"key": "userId",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User-Invalid user Id",
							"id": "f493c531-3dbc-41fb-9c36-d4f6016c3e0f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"first_name\": \"Wunmi\",\n    \"last_name\": \"Ade\",\n    \"email\": \"adewunmiakinsanya@gmail.com\",\n    \"phone\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/:tenantId/users/:userId",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										":tenantId",
										"users",
										":userId"
									],
									"variable": [
										{
											"id": "6cc1be8d-841e-46d2-a7c9-b24f5069795a",
											"key": "tenantId",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"id": "599bacd6-d59b-4cf4-844d-b734af7aea97",
											"key": "userId",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "adc08f73-0af7-41e2-8e81-d3a290ef1c93"
				},
				{
					"name": "Delete User",
					"item": [
						{
							"name": "Delete User",
							"id": "cb255e3b-7dce-4016-b85a-a9ffb16c656c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/tenants/:tenantId/users/:userId",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										":tenantId",
										"users",
										":userId"
									],
									"variable": [
										{
											"id": "0faa2547-3dcc-4a8b-b39b-bb476bafb1a2",
											"key": "tenantId",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"id": "5cc53815-a392-41b5-962f-6138431db29a",
											"key": "userId",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User-Invalid Tenant Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0afb8a3-7d8a-4631-a39a-f4a6a0ebb672",
										"exec": [
											"try {",
											"    const { message, status } = pm.response.json()",
											"",
											"    pm.test(\"Status code is 400\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"",
											"    pm.test(\"Test for valid error message\", () => {",
											"        pm.expect(message).to.be.an(\"string\") && pm.expect(message).to.eql('Tenant ID must be a valid UUID')",
											"    })",
											"",
											"} catch (error) {",
											"    console.error(\"Error from test:\", error);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e52a84f7-64fa-4c2c-82bb-d013bc5c650e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/tenants/:tenantId/users/:userId",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										":tenantId",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "tenantId",
											"value": "00000000-0000-0000-0000-00000000000@"
										},
										{
											"key": "userId",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User-Invalid User Id",
							"id": "5eb1142f-035a-46a1-ab90-d36f27b5ae9f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminAccessToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/tenants/:tenantId/users/:userId",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										":tenantId",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "tenantId",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "userId",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "7ff52afc-eb86-4a0c-83cd-1457ac54a35c"
				}
			],
			"id": "9c502c40-6ece-483a-ba71-1541b3acd34c"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{adminAccessToken}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "501e6266-e130-41ed-a83a-3a7012b902cf",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.environment.set('origin', \"https://northquestfinance.com\")",
					"pm.request.headers.add({",
					"    key: \"origin\",",
					"    value: pm.environment.get(\"origin\")",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "17b293d4-8b77-40aa-ac10-c6212d069e03",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}